import 'package:flutter/material.dart';
import 'package:nb_utils/nb_utils.dart';
import 'package:now_tv_v1/shared/core/now_tv_colors.dart';
import 'package:now_tv_v1/shared/core/now_tv_image_constant.dart';

/// Helper class for managing themes and colors.
class ThemeManager {
  static String _themeData = 'primary';

  static void setThemeData(String theme) {
    _themeData = theme;
  }

  static String getThemeData() {
    return _themeData;
  }
}

class ThemeHelper {
  // The current app theme
  final String _appTheme = ThemeManager.getThemeData();

// A map of custom color themes supported by the app
  final Map<String, PrimaryColors> _supportedCustomColor = <String, PrimaryColors>{
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  final Map<String, ColorScheme> _supportedColorScheme = <String, ColorScheme>{
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generatorif (!_supportedCustomColor.containsKey(_appTheme)){  throw Exception(               "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");      } //return theme from map
    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator if (!_supportedColorScheme.containsKey(_appTheme)){   throw Exception(                "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");       }  //return theme from map
    ColorScheme colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: NowTvColors.gpColorBlack,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
            backgroundColor: colorScheme.onError.withOpacity(0.36),
            shape:
                RoundedRectangleBorder(borderRadius: BorderRadius.circular(4)),
            shadowColor: colorScheme.primary,
            elevation: 4,
            visualDensity: const VisualDensity(
              vertical: -4,
              horizontal: -4,
            ),
            padding: EdgeInsets.zero),
      ),
      dividerTheme: DividerThemeData(
          thickness: 24, space: 24, color: colorScheme.onPrimaryContainer),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        displaySmall:
            primaryTextStyle(size: 15, color: NowTvColors.gpLightBlue),
        titleSmall: primaryTextStyle(size: 14, color: NowTvColors.gpLightBlue),
        titleMedium: primaryTextStyle(size: 16, color: NowTvColors.gpLightBlue),
        titleLarge: primaryTextStyle(size: 20, color: NowTvColors.gpLightBlue),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static const ColorScheme primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0X3F000000),
    primaryContainer: Color(0XFF202020),

    // Error colors
    errorContainer: Color(0XFF949494),
    onError: Color(0XFFFFFFFF),

    // On colors(text colors)
    onPrimary: Color(0X44313131),
    onPrimaryContainer: Color(0XFFDEDEDE),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Olive
  Color get olive => const Color(0XFFF7F3D7);

  // White
  Color get white => const Color(0XFFFFFFFF);

  // Brown
  Color get brown200 => const Color(0XFF937131);

  // Gray
  Color get gray900 => const Color(0XFF121515);

  Color get gray800 => const Color(0XFF3A4245);

  Color get gray700 => const Color(0X23001540);

  // BlueGray
  Color get blueGray100 => const Color(0XFFD9D9D9);

  Color get blueGray900 => const Color(0XFF262C2D);

  // Black
  Color get black => const Color(0xFF010101);
}

class NowTvDecoration {
  static BoxDecoration get normalDecoration =>
      const BoxDecoration(color: Colors.transparent);

  static BoxDecoration get appBarDecoration => BoxDecoration(
        color: theme.colorScheme.onPrimary,
        image: DecorationImage(
            image: AssetImage(NowTvImageConstant.imagePath), fit: BoxFit.cover),
      );
}

class BorderRadiusStyle {
  static BorderRadius get roundedBorder5 => BorderRadius.circular(5.0);

  static BorderRadius get roundedBorder55 => BorderRadius.circular(55.0);

  static BorderRadius get roundedBorder60 => BorderRadius.circular(60.0);
}

double get strokeAlignInside => BorderSide.strokeAlignInside;

double get strokeAlignCenter => BorderSide.strokeAlignCenter;

double get strokeAlignOutside => BorderSide.strokeAlignOutside;

class NowTvTextStyles {
  // Display text style
  static TextStyle get displaySmall =>
      theme.textTheme.displaySmall!.copyWith(fontSize: 30.0, height: 1.35);

  static TextStyle get titleMediumSemiBold =>
      theme.textTheme.titleMedium!.copyWith(fontWeight: FontWeight.w600);
}

class NowTvButtonStyles {
  // Text button style
  static ButtonStyle get none => ButtonStyle(
      backgroundColor: MaterialStateProperty.all<Color>(Colors.transparent),
      elevation: MaterialStateProperty.all<double>(0));

  static ButtonStyle get elevatedButtonDecoration => ButtonStyle(
      backgroundColor: MaterialStateProperty.all<Color>(Colors.transparent),
      elevation: MaterialStateProperty.all<double>(0));
}

/// Class containing custom colors for a primary theme.
PrimaryColors get appTheme => ThemeHelper().themeColor();

ThemeData get theme => ThemeHelper().themeData();
